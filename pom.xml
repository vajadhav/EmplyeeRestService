<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>akka.http.employee.service.example</groupId>
<artifactId>EmployeeCouchAkkaService</artifactId>
<packaging>jar</packaging>
<version>1.0-SNAPSHOT</version>
<name>EmployeeCouchAkkaService</name>
<url>http://scala-lang.org</url>
<repositories>
    <repository>
        <id>scala-tools.org</id>
        <name>Scala-tools Maven2 Repository</name>
        <url>http://scala-tools.org/repo-releases</url>
    </repository>
</repositories>
<pluginRepositories>
    <pluginRepository>
        <id>scala-tools.org</id>
        <name>Scala-tools Maven2 Repository</name>
        <url>http://scala-tools.org/repo-releases</url>
    </pluginRepository>
</pluginRepositories>
<dependencies>
    <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>2.11.8</version>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>3.8.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-actor_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-remote_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-http-experimental_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-http-spray-json-experimental_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-stream_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-http-testkit_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>
    <dependency>
        <groupId>com.ibm</groupId>
        <artifactId>couchdb-scala_2.11</artifactId>
        <version>0.7.2</version>
    </dependency>
    <dependency>
        <groupId>org.scalaj</groupId>
        <artifactId>scalaj-time_2.11</artifactId>
        <version>0.8</version>
    </dependency>
    <dependency>
        <groupId>org.log4s</groupId>
        <artifactId>log4s_2.11</artifactId>
        <version>1.3.0</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.1.7</version>
    </dependency>
    <dependency>
        <groupId>com.github.swagger-akka-http</groupId>
        <artifactId>swagger-akka-http_2.11</artifactId>
        <version>0.7.2</version>
    </dependency>
    <dependency>
        <groupId>org.scalactic</groupId>
        <artifactId>scalactic_2.11</artifactId>
        <version>3.0.0</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-http-testkit-experimental_2.11</artifactId>
        <version>2.4.2-RC1</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.typesafe.akka/akka-testkit_2.11 -->
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-testkit_2.11</artifactId>
        <version>2.4.10</version>
    </dependency>


    <!-- https://mvnrepository.com/artifact/org.scalamock/scalamock-scalatest-support_2.11 -->
    <dependency>
        <groupId>org.scalamock</groupId>
        <artifactId>scalamock-scalatest-support_2.11</artifactId>
        <version>3.1.1</version>
    </dependency>
    <dependency>
        <groupId>info.cukes</groupId>
        <artifactId>cucumber-java</artifactId>
        <version>1.2.2</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>info.cukes</groupId>
        <artifactId>cucumber-junit</artifactId>
        <version>1.2.4</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
        <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->

    <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.5</version>
    </dependency>
    <!-- The following dependency is the fix for swagger api docs generation route that broke due to a mismatched jackson databind lib related to
    the jackson scala module version below-->
    <dependency>
        <groupId>com.fasterxml.jackson.module</groupId>
        <artifactId>jackson-module-scala_2.11</artifactId>
        <version>2.6.1</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock -->
    <dependency>
        <groupId>com.github.tomakehurst</groupId>
        <artifactId>wiremock</artifactId>
        <version>2.2.1</version>
    </dependency>
</dependencies>
<build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <resources>
        <resource>
            <directory>src/main/resources</directory>
        </resource>
    </resources>
    <plugins>
        <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <version>3.2.2</version>
            <executions>
                <execution>
                    <goals>
                        <goal>compile</goal>
                        <goal>testCompile</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <jvmArgs>
                    <jvmArg>-Xms64m</jvmArg>
                    <jvmArg>-Xmx1024m</jvmArg>
                </jvmArgs>
            </configuration>
        </plugin>
        <!-- Put dependencies in 'appassembler/lib' directory and generate start script in 'appassembler/bin' -->
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>appassembler-maven-plugin</artifactId>
            <version>1.10</version>
            <configuration>
                <programs>
                    <program>
                        <mainClass>com.ibm.employee.service.app.EmployeeCouchService</mainClass>
                        <id>app</id>
                    </program>
                </programs>
                <repositoryLayout>flat</repositoryLayout>
                <repositoryName>lib</repositoryName>
            </configuration>
            <executions>
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>assemble</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>

        <!-- Zip whole 'appassemble' directory, then put the project artifact in the zip's 'appassemble/lib'
             This creates a 'distZip' style bundle similar to Gradle's -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.4</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>single</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <descriptor>src/main/assembly/bin.xml</descriptor>
            </configuration>
        </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>process-resources</phase>
                        <configuration>
                            <tasks>
                                <copy todir="target">
                                    <fileset dir="${basedir}" includes="Dockerfile" />
                                </copy>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>shade</goal>
                    </goals>
                    <configuration>
                        <shadedArtifactAttached>true</shadedArtifactAttached>
                        <shadedClassifierName>allinone</shadedClassifierName>
                        <artifactSet>
                            <includes>
                                <include>*:*</include>
                            </includes>
                        </artifactSet>
                        <transformers>
                            <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>reference.conf</resource>
                            </transformer>
                            <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                <manifestEntries>
                                    <Main-Class>com.ibm.employee.service.app.EmployeeCouchService</Main-Class>
                                </manifestEntries>
                            </transformer>
                        </transformers>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        <plugin>
            <groupId>org.jolokia</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.13.9</version>
            <configuration>
                <images>
                    <image>
                        <name>amitkarir/scala-akka-http-employee-rest-service-example:latest</name>
                        <build>
                            <from>jboss/base-jdk:8</from>
                            <maintainer>markus@jboss.org</maintainer>
                            <ports>
                                <port>8765</port>
                            </ports>
                            <cmd>
                                <shell>java -Djava.security.egd=file:/dev/./urandom -jar /opt/akka-http/akka-http-employee-service.jar</shell>
                            </cmd>
                            <assembly>
                                <inline>
                                    <dependencySets>
                                        <dependencySet>
                                            <useProjectAttachments>true</useProjectAttachments>
                                            <includes>
                                                <include>akka.http.employee.service.example:EmployeeCouchAkkaService:jar:allinone</include>
                                            </includes>
                                            <outputFileNameMapping>akka-http-employee-service.jar</outputFileNameMapping>
                                        </dependencySet>
                                    </dependencySets>
                                </inline>
                                <user>jboss:jboss:jboss</user>
                                <basedir>/opt/akka-http</basedir>
                            </assembly>
                        </build>
                        <run>
                            <ports>
                                <port>jboss.port:8765</port>
                            </ports>
                            <wait>
                                <http>
                                    <url>http://localhost:${jboss.port}</url>
                                    <status>200</status>
                                </http>
                                <time>30000</time>
                            </wait>
                            <log>
                                <color>yellow</color>
                                <prefix>AKKA</prefix>
                            </log>
                        </run>
                    </image>
                </images>
            </configuration>
        </plugin>
    </plugins>
</build>
</project>